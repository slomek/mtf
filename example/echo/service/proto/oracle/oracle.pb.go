// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/oracle/oracle.proto

package oracle

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AskDeepThroughRequest struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AskDeepThroughRequest) Reset()         { *m = AskDeepThroughRequest{} }
func (m *AskDeepThroughRequest) String() string { return proto.CompactTextString(m) }
func (*AskDeepThroughRequest) ProtoMessage()    {}
func (*AskDeepThroughRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_oracle_50eff865dd064971, []int{0}
}
func (m *AskDeepThroughRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AskDeepThroughRequest.Unmarshal(m, b)
}
func (m *AskDeepThroughRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AskDeepThroughRequest.Marshal(b, m, deterministic)
}
func (dst *AskDeepThroughRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AskDeepThroughRequest.Merge(dst, src)
}
func (m *AskDeepThroughRequest) XXX_Size() int {
	return xxx_messageInfo_AskDeepThroughRequest.Size(m)
}
func (m *AskDeepThroughRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AskDeepThroughRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AskDeepThroughRequest proto.InternalMessageInfo

func (m *AskDeepThroughRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type AskDeepThroughRespnse struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AskDeepThroughRespnse) Reset()         { *m = AskDeepThroughRespnse{} }
func (m *AskDeepThroughRespnse) String() string { return proto.CompactTextString(m) }
func (*AskDeepThroughRespnse) ProtoMessage()    {}
func (*AskDeepThroughRespnse) Descriptor() ([]byte, []int) {
	return fileDescriptor_oracle_50eff865dd064971, []int{1}
}
func (m *AskDeepThroughRespnse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AskDeepThroughRespnse.Unmarshal(m, b)
}
func (m *AskDeepThroughRespnse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AskDeepThroughRespnse.Marshal(b, m, deterministic)
}
func (dst *AskDeepThroughRespnse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AskDeepThroughRespnse.Merge(dst, src)
}
func (m *AskDeepThroughRespnse) XXX_Size() int {
	return xxx_messageInfo_AskDeepThroughRespnse.Size(m)
}
func (m *AskDeepThroughRespnse) XXX_DiscardUnknown() {
	xxx_messageInfo_AskDeepThroughRespnse.DiscardUnknown(m)
}

var xxx_messageInfo_AskDeepThroughRespnse proto.InternalMessageInfo

func (m *AskDeepThroughRespnse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*AskDeepThroughRequest)(nil), "oracle.AskDeepThroughRequest")
	proto.RegisterType((*AskDeepThroughRespnse)(nil), "oracle.AskDeepThroughRespnse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OracleClient is the client API for Oracle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OracleClient interface {
	AskDeepThrough(ctx context.Context, in *AskDeepThroughRequest, opts ...grpc.CallOption) (*AskDeepThroughRespnse, error)
}

type oracleClient struct {
	cc *grpc.ClientConn
}

func NewOracleClient(cc *grpc.ClientConn) OracleClient {
	return &oracleClient{cc}
}

func (c *oracleClient) AskDeepThrough(ctx context.Context, in *AskDeepThroughRequest, opts ...grpc.CallOption) (*AskDeepThroughRespnse, error) {
	out := new(AskDeepThroughRespnse)
	err := c.cc.Invoke(ctx, "/oracle.Oracle/AskDeepThrough", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OracleServer is the server API for Oracle service.
type OracleServer interface {
	AskDeepThrough(context.Context, *AskDeepThroughRequest) (*AskDeepThroughRespnse, error)
}

func RegisterOracleServer(s *grpc.Server, srv OracleServer) {
	s.RegisterService(&_Oracle_serviceDesc, srv)
}

func _Oracle_AskDeepThrough_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskDeepThroughRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleServer).AskDeepThrough(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.Oracle/AskDeepThrough",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleServer).AskDeepThrough(ctx, req.(*AskDeepThroughRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Oracle_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oracle.Oracle",
	HandlerType: (*OracleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskDeepThrough",
			Handler:    _Oracle_AskDeepThrough_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/oracle/oracle.proto",
}

func init() { proto.RegisterFile("proto/oracle/oracle.proto", fileDescriptor_oracle_50eff865dd064971) }

var fileDescriptor_oracle_50eff865dd064971 = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0x2f, 0x4a, 0x4c, 0xce, 0x49, 0x85, 0x52, 0x7a, 0x60, 0x31, 0x21, 0x36, 0x08,
	0x4f, 0x49, 0x9b, 0x4b, 0xd4, 0xb1, 0x38, 0xdb, 0x25, 0x35, 0xb5, 0x20, 0x24, 0xa3, 0x28, 0xbf,
	0x34, 0x3d, 0x23, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x88, 0x8b, 0x25, 0x25, 0xb1,
	0x24, 0x51, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xcc, 0xc6, 0xa6, 0xb8, 0xb8, 0x20, 0xaf,
	0x38, 0x15, 0x9b, 0x62, 0xa3, 0x28, 0x2e, 0x36, 0x7f, 0xb0, 0x1d, 0x42, 0x01, 0x5c, 0x7c, 0xa8,
	0xda, 0x84, 0x64, 0xf5, 0xa0, 0x8e, 0xc1, 0x6a, 0xb7, 0x14, 0x4e, 0x69, 0xb0, 0x6d, 0x4a, 0x0c,
	0x49, 0x6c, 0x60, 0x4f, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xca, 0x24, 0xd0, 0xe1,
	0x00, 0x00, 0x00,
}
